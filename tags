!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR = $(CROSS_COMPILE)ar$/;"	m
CC	Makefile	/^CC = $(CROSS_COMPILE)gcc$/;"	m
CLIENT_BIN	Makefile	/^CLIENT_BIN = $(CROSS_ARCH)-client$/;"	m
CLIENT_DIR	Makefile	/^CLIENT_DIR = $(SRC_DIR)\/client$/;"	m
CLT_INFO_T	include/server/tcpserver.h	/^} CLT_INFO_T;$/;"	t	typeref:struct:clt_info
CROSS_ARCH	Makefile	/^CROSS_ARCH = arm$/;"	m
CROSS_COMPILE	Makefile	/^CROSS_COMPILE = \/home\/joison\/invengo-work\/usr\/local\/arm\/3.4.1\/bin\/arm-linux-$/;"	m
FRAME_HEAD	include/cs_common.h	16;"	d
MAXLINE	src/client/udpclient.c	10;"	d	file:
MAXLINE	src/server/udpserver.c	8;"	d	file:
MAX_CMD_LEN	include/cs_common.h	17;"	d
MAX_FRAME_LEN	include/cs_common.h	15;"	d
MAX_RECV_LEN	include/cs_common.h	14;"	d
OUT_DIR	Makefile	/^OUT_DIR = $(ROOT_DIR)\/bin$/;"	m
PROCESS_DATA_T	include/process/process.h	/^} PROCESS_DATA_T;$/;"	t	typeref:struct:process_data
PROCESS_DIR	Makefile	/^PROCESS_DIR = $(SRC_DIR)\/process$/;"	m
PROCESS_EXTERN	include/process/process.h	4;"	d
PROCESS_EXTERN	include/process/process.h	6;"	d
PROCESS_FUNC	include/process/process.h	/^typedef int (*PROCESS_FUNC)(PROCESS_DATA_T* pdata);$/;"	t
PROCESS_METHOD_T	include/process/process.h	/^typedef unsigned char PROCESS_METHOD_T;$/;"	t
PROCESS_METHOD_T	include/process/process.h	/^} PROCESS_METHOD_T;$/;"	t	typeref:struct:process_method
ROOT_DIR	Makefile	/^ROOT_DIR = $(PWD)$/;"	m
SERVER_BIN	Makefile	/^SERVER_BIN = $(CROSS_ARCH)-server$/;"	m
SERVER_DIR	Makefile	/^SERVER_DIR = $(SRC_DIR)\/server$/;"	m
SERV_PORT	src/client/udpclient.c	11;"	d	file:
SERV_PORT	src/server/udpserver.c	9;"	d	file:
SRC_DIR	Makefile	/^SRC_DIR = $(ROOT_DIR)\/src$/;"	m
STRIP	Makefile	/^STRIP = $(CROSS_COMPILE)strip$/;"	m
TCPSERVER_EXTERN	include/server/tcpserver.h	6;"	d
TCPSERVER_EXTERN	include/server/tcpserver.h	8;"	d
TCP_DOMAIN_DEFAULT	include/cs_common.h	8;"	d
TCP_MAX_CONN_DEFAULT	include/cs_common.h	7;"	d
TCP_PORT_DEFAULT	include/cs_common.h	6;"	d
TEST_DIR	Makefile	/^TEST_DIR = $(ROOT_DIR)\/test$/;"	m
UDP_SERVER_PORT	include/cs_common.h	11;"	d
__CS_COMMON_H__	include/cs_common.h	3;"	d
__PROCESS_H__	include/process/process.h	2;"	d
__TCPSERVER_C__	src/server/tcpserver.c	1;"	d	file:
__TCPSERVER_C__	src/server/tcpserver.c	301;"	d	file:
__TCPSERVER_H__	include/server/tcpserver.h	3;"	d
ci_cfd	include/server/tcpserver.h	/^	int ci_cfd;	\/\/client socket fd$/;"	m	struct:clt_info
ci_conn_time	include/server/tcpserver.h	/^	struct timeval ci_conn_time;$/;"	m	struct:clt_info	typeref:struct:clt_info::timeval
ci_pid	include/server/tcpserver.h	/^	pthread_t ci_pid;	\/\/client transfer thread$/;"	m	struct:clt_info
ci_rcvbuf	include/server/tcpserver.h	/^	char ci_rcvbuf[MAX_BUFF_SIZE];$/;"	m	struct:clt_info
ci_rcvlen	include/server/tcpserver.h	/^	int ci_rcvlen;$/;"	m	struct:clt_info
ci_sem	include/server/tcpserver.h	/^	sem_t ci_sem;	\/\/when process success post sem, send thread get sem continue$/;"	m	struct:clt_info
ci_sndbuf	include/server/tcpserver.h	/^	char ci_sndbuf[MAX_BUFF_SIZE];$/;"	m	struct:clt_info
ci_sndlen	include/server/tcpserver.h	/^	int ci_sndlen;$/;"	m	struct:clt_info
clt_info	include/server/tcpserver.h	/^typedef struct clt_info {$/;"	s
clt_info_init	src/server/tcpserver.c	/^int clt_info_init(CLT_INFO_T* clt_item){$/;"	f
clt_info_release	src/server/tcpserver.c	/^void clt_info_release(CLT_INFO_T* clt_item){$/;"	f
clt_init	src/server/tcpserver.c	/^void clt_init(CLT_INFO_T* pclt){$/;"	f
clt_release	src/server/tcpserver.c	/^void clt_release(CLT_INFO_T* pclt){$/;"	f
container_of	include/cs_common.h	33;"	d
do_cli	src/client/udpclient.c	/^void do_cli(FILE *fp, int sockfd, struct sockaddr *pservaddr, socklen_t servlen)$/;"	f
do_echo	src/server/udpserver.c	/^void do_echo(int sockfd, struct sockaddr *pcliaddr, socklen_t clilen)$/;"	f
domain	include/server/tcpserver.h	/^	int domain;$/;"	m	struct:ts_dev
main	src/client/tcpclient.c	/^int main(int argc,char *argv[])$/;"	f
main	src/client/udpclient.c	/^int main(int argc, char **argv)$/;"	f
main	src/server/udpserver.c	/^int main(void)$/;"	f
max_conn	include/server/tcpserver.h	/^	unsigned int max_conn;$/;"	m	struct:ts_dev
next	include/process/process.h	/^	struct process_data* next;$/;"	m	struct:process_data	typeref:struct:process_data::process_data
next	include/server/tcpserver.h	/^	struct clt_info* next;$/;"	m	struct:clt_info	typeref:struct:clt_info::clt_info
offsetof	include/cs_common.h	19;"	d
offsetof	include/cs_common.h	21;"	d
offsetof	include/cs_common.h	23;"	d
pd_buf	include/process/process.h	/^	char pd_buf[MAX_CMD_LEN];$/;"	m	struct:process_data
pd_func	include/process/process.h	/^	PROCESS_FUNC* pd_func;$/;"	m	struct:process_method
pd_head	include/process/process.h	/^	PROCESS_METHOD_T pd_head;	$/;"	m	struct:process_data
pd_len	include/process/process.h	/^	unsigned int pd_len;$/;"	m	struct:process_data
pd_sem	include/process/process.h	/^	sem_t pd_sem;$/;"	m	struct:process_data
pd_sem	include/process/process.h	/^	sem_t pd_sem;$/;"	m	struct:process_method
port	include/server/tcpserver.h	/^	unsigned short port;$/;"	m	struct:ts_dev
process_data	include/process/process.h	/^typedef struct process_data{$/;"	s
process_method	include/process/process.h	/^typedef struct process_method{$/;"	s
ptcp_server	src/server/tcpserver.c	/^struct tcp_data* ptcp_server;$/;"	v	typeref:struct:tcp_data
tcp_server_clt_add	src/server/tcpserver.c	/^int tcp_server_clt_add(struct ts_data* pdata, CLT_INFO_T* clt_item){$/;"	f
tcp_server_clt_del	src/server/tcpserver.c	/^int tcp_server_clt_del(CLT_INFO_T* clt_item){$/;"	f
tcp_server_conn	src/server/tcpserver.c	/^void* tcp_server_conn(void* pdata){$/;"	f
tcp_server_connfresh	src/server/tcpserver.c	/^int tcp_server_connfresh(void* pdata){$/;"	f
tcp_server_create	src/server/tcpserver.c	/^int tcp_server_create(void* pdata)$/;"	f
tcp_server_init	src/server/tcpserver.c	/^int tcp_server_init(void* pdev){$/;"	f
tcp_server_process	src/server/tcpserver.c	/^void* tcp_server_process(void* pdata){$/;"	f
tcp_server_recv	src/server/tcpserver.c	/^void* tcp_server_recv(void* pdata){$/;"	f
td_clts_head	include/server/tcpserver.h	/^	CLT_INFO_T* td_clts_head;	\/\/clients conn info$/;"	m	struct:ts_data
td_conn_pid	include/server/tcpserver.h	/^	pthread_t td_conn_pid;	$/;"	m	struct:ts_data
td_cur_clt_num	include/server/tcpserver.h	/^	unsigned int td_cur_clt_num;	\/\/current conn number$/;"	m	struct:ts_data
td_dev	include/server/tcpserver.h	/^	struct ts_dev td_dev;$/;"	m	struct:ts_data	typeref:struct:ts_data::ts_dev
td_process_pid	include/server/tcpserver.h	/^	pthread_t td_process_pid;$/;"	m	struct:ts_data
td_recv_fds	include/server/tcpserver.h	/^	fd_set td_recv_fds;	\/\/client read fd_set$/;"	m	struct:ts_data
td_recv_pid	include/server/tcpserver.h	/^	pthread_t td_recv_pid;$/;"	m	struct:ts_data
td_sfd	include/server/tcpserver.h	/^	int td_sfd; \/\/server socket fd$/;"	m	struct:ts_data
td_snd_fds	include/server/tcpserver.h	/^	fd_set td_snd_fds;$/;"	m	struct:ts_data
ts_data	include/server/tcpserver.h	/^struct ts_data{$/;"	s
ts_dev	include/server/tcpserver.h	/^struct ts_dev {$/;"	s
